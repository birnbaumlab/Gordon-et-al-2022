#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Jun 18 11:23:06 2021

@author: khloegordon
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Aug 28 15:48:24 2019

This code is designed to cluster barcode counts generated by Illumina sequencing data
by comparing levenshtein distance between barcodes. n_edits is the maximum allowable 
edit distance that will result in two barcodes being clustered together.

@author: khloegordon
"""

# -- import standard libraries -- #
import os
import pandas as pd
import numpy as np

# -- import nonstandard libraries -- #
import xlsxwriter
import editdistance
from datetime import datetime

#%%-- SETTINGS --%%#
"""
''' Fill in selection names and identify number of rounds of selections, 
matching Excel file output from DomainSeq (dataset_000X.xlsx)'''
settings = {'selection': ['CD69+','CD69+PD-1-'], 
            'round': [[0,1,2,3,4],[0,1]], 
            'n_edits': 2} # number of levenshtein edit distances to tolerate for clustering

base = '/Users/khloegordon/Dropbox (MIT)/Code/DomainSeq/'
file = 'datasets/' + 'dataset_0001.xlsx'
"""
                        
#%% -- main function -- %%#

def levensthein_clustering(df,sel,rnd,threshold):
            
    # Sort multiplexed data by selection strategy and round of selection
    data = df[(df['Dataset'] == sel) & (df['Round'].values == rnd)].sort_values(by = ['Count'], ascending = False)
    data['Nested BCs'] = ''
    print(data)
    bcs = data['BC'].astype(str).values.tolist()
    # initialize true/false matrix where true indicates that a barcode has been matched
    matched = [[bc,False] for bc in bcs] 
    print('Filtering barcodes from {} selection round {}...'.format(sel,rnd))
    
    for i,bc1 in enumerate(bcs): 
        for j,item in enumerate(matched[i+1:]): 
        # bc1 is the reference barcode (higher frequency)
        # item[0] is the barcode that is compared to the reference barcode (lower frequency)
            
            #print('Comparing {} to {}'.format(item[0],bc1))
            
            if not item[1]: # if not yet matched
                # compare Levenshtein distance
                if editdistance.eval(bc1,item[0]) <= threshold:
            
                    matched[i+j+1][1] = True # mark as found
                    # add matched barcode to reference barcode count
                    data.loc[data.index[i],'Count'] += data.loc[data.index[i+j+1],'Count']
                    if not data.loc[data.index[i],'Nested BCs']:
                        data.loc[data.index[i],'Nested BCs'] = item[0]
                    else:
                        data.loc[data.index[i],'Nested BCs'] = data.loc[data.index[i],'Nested BCs'] + ', ' + item[0]
                    print('{} matched to {}!'.format(item[0],bc1))
                    
    matches = [tf[1] for tf in matched]
    not_matched = [not tf for tf in matches] # filter for unmatched barcodes
    n_matches = sum(matches)
    print('{} match(es) found for {} selection round {} data!'.format(n_matches,sel,rnd))
    
    # remove entries that were matched to higher frequency entries
    data = data[not_matched]
        
    print('\nlevenshtein_clustering finished!')
    
    return data
    
#%% -- MAIN -- %%#    
    
def run(dataset,**kwargs):
    os.chdir(base)
        
    df = pd.read_excel(file , sheet_name = 'DATA')
    
    # Export to Excel
    today = datetime.strftime(datetime.now(), "%m/%d/%Y %H:%M:%S")
    
    for i in range(10000):
        fname = 'dataset_unnested_' + str(i+1).zfill(4) + '.xlsx'
        if os.path.isdir(os.path.join(base,'processed datasets/',fname)):
            continue
        else:
            break
    
    writer = pd.ExcelWriter(os.path.join(base,'processed datasets/',fname),
                            engine = 'xlsxwriter')
    
    for val,n in zip(settings['selection'],settings['round']):
        for rnd in n:
            data = levensthein_clustering(df,val,rnd,settings['n_edits'])    
            data.to_excel(writer, sheet_name = '{} R{}'.format(val,rnd))
            
    # record settings used to generate processed data
    settings = pd.DataFrame({'dataset_filename':[file],
                            'levenshtein threshold':[settings['n_edits']],
                            'date and time':[today]})    
    settings.to_excel(writer, sheet_name = 'SETTINGS')
    
    writer.save()
    
    print('Illumina barcodes clustered! Dataset exported.')
    
    return export_path